/*P9.1 Program to print address of variables using address operator*/
#include<stdio.h>
int main(void)
{
	int age=30;
	float salary=1500.50;
	printf("Address of age=%p\n",&age);
	printf("Address of salary=%p\n",&salary);
	return 0;
}





/*P9.2 Dereferencing pointer variables*/
#include<stdio.h>
int main(void)
{
	int a=87;
	float b=4.5;
	int *p1=&a;
	float *p2=&b;
	printf("Value of p1 = Address of a = %p\n",p1);
	printf("Value of p2 = Address of b = %p\n",p2);
	printf("Address of p1 = %p\n",&p1);
	printf("Address of p2 = %p\n",&p2);
	printf("Value of a = %d  %d  %d\n",a,*p1,*(&a));
	printf("Value of b = %.1f  %.1f  %.1f\n",b,*p2,*(&b));
	return 0;
}





/*P9.3 Program to print size of pointer variables and size of values dereferenced by them*/
#include<stdio.h>
int main(void)
{
	char a='x',*p1=&a;
	int b=12,*p2=&b;
	float c=12.4,*p3=&c;
	double d=18.34,*p4=&d;
	printf("sizeof(p1)=%u, sizeof(*p1)=%u\n",sizeof(p1),sizeof(*p1));
	printf("sizeof(p2)=%u, sizeof(*p2)=%u\n",sizeof(p2),sizeof(*p2));
	printf("sizeof(p3)=%u, sizeof(*p3)=%u\n",sizeof(p3),sizeof(*p3));
	printf("sizeof(p4)=%u, sizeof(*p4)=%u\n",sizeof(p4),sizeof(*p4));
	return 0;
}





/*P9.4 Pointer arithmetic*/
#include<stdio.h>
int main(void)
{
	int a=5,*pi=&a;
	char b='x',*pc=&b;
	float c=5.5,*pf=&c;
	printf("Value of pi=Address of a=%p\n",pi);
	printf("Value of pc=Address of b=%p\n",pc);
	printf("Value of pf=Address of c=%p\n",pf);
	pi++;
	pc++;
	pf++;
	printf("Now value of pi=%p\n",pi);
	printf("Now value of pc=%p\n",pc);
	printf("Now value of pf=%p\n",pf);
	return 0;
}





/*P9.5 Postfix/prefix increment/decrement in a pointer variable of base type int*/
#include<stdio.h>
int main(void)
{
	int a=5;
	int *p;
	p = &a;
	printf("Value of p = Address of a = %p\n",p);
	printf("Value of p = %p\n",++p);
	printf("Value of p = %p\n",p++);
	printf("Value of p = %p\n",p);
	printf("Value of p = %p\n",--p);
	printf("Value of p = %p\n",p--);
	printf("Value of p = %p\n",p);
	return 0;
}





/*P9.6 Pointer to pointer*/
#include<stdio.h>
int main(void)
{
	int a=5;
	int *pa;
	int **ppa;
	pa = &a;
	ppa = &pa;
	printf("Address of a=%p\n",&a);
	printf("Value of pa=Address of a=%p\n",pa);
	printf("Value of *pa=Value of a=%d\n",*pa);
	printf("Address of pa=%p\n",&pa);
	printf("Value of ppa=Address of pa=%p\n",ppa);
	printf("Value of *ppa=Value of pa=%p\n",*ppa);
	printf("Value of **ppa=Value of a=%d\n",**ppa);
	printf("Address of ppa=%p\n",&ppa);
	return 0;
}






/*P9.7 Program to print the value and address of the elements of an array */
#include<stdio.h>
int main(void)
{
	int arr[5] = {5,10,15,20,25};
	int i;
	for(i=0; i<5; i++)
	{
		printf("Value of arr[%d] = %d\t",i,arr[i]);
		printf("Address of arr[%d] = %p\n",i,&arr[i]);
	}
	return 0;
}





/*P9.8 Program to print the value and address of elements of an array using pointer notation*/
#include<stdio.h>
int main(void)
{
	int arr[5]={5,10,15,20,25};
	int i;
	for(i=0; i<5; i++)
	{
		printf("Value of arr[%d] = %d\t",i,*(arr+i));
		printf("Address of arr[%d] = %p\n",i,arr+i);
	}
	return 0;
}






/* P9.9 Program to print the value of array elements using pointer and subscript notation */
#include<stdio.h>
int main(void)
{
	int arr[5] = {5,10,15,20,25};
	int i=0;
	for(i=0; i<5; i++)
	{
		printf("Value of arr[%d] = ",i);
		printf("%d\t",arr[i]);
		printf("%d\t",*(arr+i));
		printf("%d\t",*(i+arr));
		printf("%d\n",i[arr]);
		printf("Address of arr[%d] = %p\n",i,&arr[i]);
	}
	return 0;
}





/*P9.10 Program to print the value and address of array elements by subscripting a pointer variable*/
#include<stdio.h>
int main(void)
{
	int arr[5]={5,10,15,20,25};
	int i,*p;
	p=arr;		
	for(i=0; i<5; i++)
	{
		printf("Address of arr[%d]= %p %p %p %p\n",i,&arr[i],arr+i,p+i,&p[i]);
		printf("Value of arr[%d]= %d %d %d %d\n",i,arr[i],*(arr+i),*(p+i),p[i]);
	}
	return 0;
}






/*P9.11 Program to understand difference between pointer to an integer and pointer to an array of integers*/
#include<stdio.h>
int main(void)
{
	int *p;			/*Can point to an integer*/
	int (*ptr)[5];  /*Can point to an array of 5 integers*/ 
	int arr[5];
	p=arr;	/*Points to 0th element of arr*/
	ptr=&arr;	/*Points to the whole array arr*/
	printf("p=%p,ptr=%p\n",p,ptr);
	p++;
	ptr++;
	printf("p=%p,ptr=%p\n",p,ptr);
	return 0;
}






/*P9.12 Program to dereference a pointer to an array*/
#include<stdio.h>
int main(void)
{
	int arr[5] = {3,5,6,7,9};
	int *p=arr;
	int (*ptr)[5]=&arr;

	printf("p=%p, ptr=%p\n",p,ptr);
	printf("*p=%d, *ptr=%p\n",*p,*ptr);
	printf("sizeof(p)=%u,sizeof(*p)=%u\n",sizeof(p),sizeof(*p));
	printf("sizeof(ptr)=%u,sizeof(*ptr)=%u\n",sizeof(ptr),sizeof(*ptr));
	return 0;
}






/*P9.16 Call by value*/
#include<stdio.h>
void value(int x,int y);
int main(void)
{
	int a=5,b=8;
	printf("a=%d,b=%d\n",a,b);
	value(a,b);
	printf("a=%d,b=%d\n",a,b);
	return 0;
}
void value(int x,int y)
{
	x++;
	y++;
	printf("x=%d,y=%d\n",x,y);
}






/*P9.17 Program to explain call by reference*/
#include<stdio.h>
void ref(int *p,int *q);
int main(void)
{
	int a=5,b=8;
	printf("a=%d,b=%d\n",a,b);
	ref(&a,&b);
	printf("a=%d,b=%d\n",a,b);
	return 0;
}
void ref(int *p,int *q)
{
	(*p)++;
	(*q)++;
	printf("*p=%d, *q=%d\n",*p,*q);
}






/*P9.18 Returning more than one value from a function using call by reference*/
#include<stdio.h>
void func(int x,int y,int *ps,int *pd,int *pp);
int main(void)
{
	int a,b,sum,diff,prod;
	a=6;
	b=4;
	func(a,b,&sum,&diff,&prod);
	printf("Sum=%d, Difference=%d, Product=%d\n",sum,diff,prod);
	return 0;
}
void func(int x,int y,int *ps,int *pd,int *pp)
{
	*ps=x+y;
	*pd=x-y;  
	*pp=x*y; 	
}





/*P9.19 Function returning pointer*/
#include<stdio.h>
int *fun(int *p,int n);
int main(void)
{
	int n=5,arr[10]={1,2,3,4,5,6,7,8,9,10};
	int *ptr;
	ptr=fun(arr,n);
	printf("Value of arr=%p, Value of ptr=%p, value of *ptr=%d\n",arr,ptr,*ptr);
	return 0;
}
int *fun(int *p,int n)  
{
	p = p+n;
	return p;
}




/*P9.23 Array of pointers*/
#include<stdio.h>
int main(void)
{
	int *pa[3];
	int i,a=5,b=10,c=15;
	pa[0]=&a;	pa[1]=&b;	pa[2]=&c;

	for(i=0; i<3; i++)
	{
		printf("pa[%d]=%p\t",i,pa[i]);
		printf("*pa[%d]=%d\n",i,*pa[i]);
	}
	return 0;
}




/*P9.24 Array of pointers*/
#include<stdio.h>
int main(void)
{
	int i,arr[4] = {5,10,15,20};
	int *pa[4];
	for(i=0; i<4; i++)
		pa[i] = &arr[i];
	for(i=0; i<4; i++)
	{
		printf("pa[%d] = %p\t",i,pa[i]);
		printf("*pa[%d] = %d\n",i,*pa[i]);
	}
	return 0;
}






/*P9.25 Array of pointers*/
#include<stdio.h>
int main(void)
{
	int i,j,arr[3][4]={{10,11,12,13},{20,21,22,23},{30,31,32,33}};
	int *pa[3];
	for(i=0; i<3; i++)
		pa[i]=arr[i];

	for(i=0; i<3; i++)
	{	
		for(j=0; j<4; j++)
			printf("%d  ",pa[i][j]);
		printf("\n");
	}
	return 0;
}





/*P9.28 Program to understand dynamic allocation of memory*/
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
	int *p,n,i;
	printf("Enter the number of integers to be entered : ");
	scanf("%d",&n);
	p = (int *)malloc(n*sizeof(int)); 
	if(p==NULL)
	{
		printf("Memory not available\n");
		exit(1);
	}
	for(i=0; i<n; i++)
	{
		printf("Enter an integer : ");
		scanf("%d",p+i);
	}
	for(i=0; i<n; i++)
		printf("%d\t",*(p+i));
	return 0;
}





/*P9.29 realloc() function*/
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
	int i,*ptr;
	ptr=(int *)malloc(5 *sizeof(int));
	if(ptr==NULL)
	{
		printf("Memory not available\n");
		exit(1);
	}
	for(i=0; i<5; i++)
		*(ptr+i)=i*2;
	
	ptr=(int *)realloc(ptr,9*sizeof(int));    /*Allocate memory for 4 more integers*/
	if(ptr==NULL) 
	{
		printf("Memory not available\n");
		exit(1);
	}
	for(i=5; i<9; i++)
		*(ptr+i)=i*10;

	for(i=0; i<9; i++)
		printf("%d ",*(ptr+i));
	return 0;
}






/*P9.30 Program to access dynamically allocated memory as a 1d array*/
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
	int *p,n,i;
	printf("Enter the number of integers to be entered : ");
	scanf("%d",&n);
	p=(int *)malloc(n*sizeof(int));
	if(p==NULL)
	{
		printf("Memory not available\n");
		exit(1);
	}
	for(i=0; i<n; i++)
	{
		printf("Enter an integer : ");
		scanf("%d",&p[i] );
	}
	for(i=0; i<n; i++)
		printf("%d\t",p[i]);
	return 0;
}







/*P9.31 Program to dynamically allocate a 2-D array using pointer to an array*/
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
	int i,j,rows;
	int (*a)[4];
	printf("Enter number of rows : ");
	scanf("%d",&rows);
	a = (int(*)[4])malloc(rows*4*sizeof(int));
	for(i=0; i<rows; i++)
		for(j=0; j<4; j++)
		{
			printf("Enter a[%d][%d] : ",i,j);
			scanf("%d",&a[i][j]);
		}
	printf("The matrix is :\n");
	for(i=0; i<rows; i++)
	{
		for(j=0; j<4; j++)
			printf("%5d",a[i][j]);
		printf("\n");
	}
	free(a);
	return 0;
}






/*P9.32 Program to dynamically allocate a 2-D array using array of pointers*/
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
	int *a[3],i,j,cols;
	printf("Enter number of columns : ");
	scanf("%d",&cols);	
	/*Initialize each pointer in array by address of dynamically allocated memory*/
	for(i=0; i<3; i++)
		a[i] = (int *) malloc(cols*sizeof(int));
	for(i=0; i<3; i++)
		for(j=0; j<cols; j++)
		{
			printf("Enter value for a[%d][%d] : ",i,j);
			scanf("%d",&a[i][j]);
		}
	printf("The matrix is :\n");
	for(i=0; i<3; i++)
	{
		for(j=0; j<cols; j++)
			printf("%5d",a[i][j]);
		printf("\n");
	}
	for(i=0; i<3; i++)
		free(a[i]);
	return 0;
}






/*P9.33 Program to dynamically allocate a 2-D array*/
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
	int **a,i,j,rows,cols;
	printf("Enter number of rows and columns : ");
	scanf("%d%d",&rows,&cols);
	/*Allocate a one dimensional array of int pointers*/
	a=(int **)malloc(rows*sizeof(int *));
	
	/*Allocate a one dimensional array of integers for each row pointer */ 
	for(i=0; i<rows; i++)
		a[i] = (int *)malloc(cols * sizeof(int));

	for(i=0; i<rows; i++)
		for(j=0; j<cols; j++)
		{
			printf("Enter a[%d][%d] : ",i,j);
			scanf("%d",&a[i][j]);
		}
	printf("The matrix is :\n");
	for(i=0; i<rows; i++)
	{
		for(j=0; j<cols; j++)
			printf("%5d",a[i][j]);
		printf("\n");
	}

	for(i=0; i<rows; i++)
		free(a[i]);
	free(a);
	return 0;
}






/*P9.38 Array of function pointers*/
#include<stdio.h>
float add(float,int);
float sub(float,int);
float mul(float,int);
float div(float,int);
int main(void)
{
	int i,b;
	float a;
	float(*fp[])(float,int)={add,sub,mul,div};
	char *operation[]={"Add","Subtract","Multiply","Divide"};

	printf("Enter a float and a integer : " );
	scanf("%f%d",&a,&b);

	for(i=0;i<4;i++)
		printf("%s: %f\n",operation[i],(*fp[i])(a,b));
	return 0;
}
float add(float a,int b)
{
	return a+b;
}
float sub(float a,int b)
{
	return a-b;
}
float mul(float a,int b)
{
	return a*b;
}
float div(float a,int b)
{
	return a/b;
}







